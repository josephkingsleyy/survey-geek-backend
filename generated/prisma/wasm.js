
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BillingScalarFieldEnum = {
  id: 'id',
  planName: 'planName',
  amount: 'amount',
  currency: 'currency',
  expiresAt: 'expiresAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  method: 'method',
  reference: 'reference',
  description: 'description',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.SurveyInterestScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  description: 'description',
  status: 'status',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailVerifiedAt: 'emailVerifiedAt',
  password: 'password',
  username: 'username',
  phoneNumber: 'phoneNumber',
  alternatePhoneNumber: 'alternatePhoneNumber',
  country: 'country',
  state: 'state',
  employmentStatus: 'employmentStatus',
  mostPreferredCommsChannel: 'mostPreferredCommsChannel',
  howYouGotToKnowUs: 'howYouGotToKnowUs',
  profilePhoto: 'profilePhoto',
  dob: 'dob',
  gender: 'gender',
  location: 'location',
  occupation: 'occupation',
  role: 'role',
  isActive: 'isActive',
  twoFactorAuth: 'twoFactorAuth',
  lastLogin: 'lastLogin',
  ipAddress: 'ipAddress',
  browserAgent: 'browserAgent',
  subscriptionPlan: 'subscriptionPlan',
  subscriptionPlanExpireAt: 'subscriptionPlanExpireAt',
  billingId: 'billingId',
  bio: 'bio',
  referralCode: 'referralCode',
  softDelete: 'softDelete',
  firstName: 'firstName',
  lastName: 'lastName',
  countryCode: 'countryCode',
  stateCode: 'stateCode',
  subDivisionCode: 'subDivisionCode',
  subDivisionName: 'subDivisionName',
  address: 'address',
  hasOnboarded: 'hasOnboarded',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Billing: 'Billing',
  Payment: 'Payment',
  SurveyInterest: 'SurveyInterest',
  Ticket: 'Ticket',
  User: 'User'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/devclassik/Documents/survey geek/survey-geek-backend/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/devclassik/Documents/survey geek/survey-geek-backend/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../.env",
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": true,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\" // or \"mysql\" | \"sqlite\" | \"sqlserver\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Billing {\n  id        Int       @id @default(autoincrement())\n  planName  String\n  amount    Float\n  currency  String\n  expiresAt DateTime?\n  User      User?\n}\n\nmodel Payment {\n  id          Int       @id @default(autoincrement())\n  amount      Float\n  currency    String    @default(\"NGN\")\n  status      String    @default(\"pending\")\n  method      String?\n  reference   String    @unique\n  description String?\n  paidAt      DateTime?\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime\n  userId      Int\n  User        User      @relation(fields: [userId], references: [id])\n}\n\nmodel SurveyInterest {\n  id   Int    @id @default(autoincrement())\n  name String @unique\n  User User[] @relation(\"UserInterests\")\n}\n\nmodel Ticket {\n  id          Int      @id @default(autoincrement())\n  subject     String\n  description String?\n  status      String   @default(\"open\")\n  priority    String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime\n  userId      Int\n  User        User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id                        Int              @id @default(autoincrement())\n  email                     String           @unique\n  emailVerifiedAt           String?\n  password                  String\n  username                  String?\n  phoneNumber               String?\n  alternatePhoneNumber      String?\n  country                   String?\n  state                     String?\n  employmentStatus          String?\n  mostPreferredCommsChannel String?\n  howYouGotToKnowUs         String?\n  profilePhoto              String?\n  dob                       DateTime?\n  gender                    String?\n  location                  String?\n  occupation                String?\n  role                      String?\n  isActive                  String?\n  twoFactorAuth             String?\n  lastLogin                 String?\n  ipAddress                 String?\n  browserAgent              String?\n  subscriptionPlan          String?\n  subscriptionPlanExpireAt  String?\n  billingId                 Int?             @unique\n  bio                       String?\n  referralCode              String?\n  softDelete                Boolean?\n  firstName                 String?\n  lastName                  String?\n  countryCode               String?\n  stateCode                 String?\n  subDivisionCode           String?\n  subDivisionName           String?\n  address                   String?\n  hasOnboarded              Boolean?\n  createdAt                 DateTime         @default(now())\n  Payment                   Payment[]\n  Ticket                    Ticket[]\n  Billing                   Billing?         @relation(fields: [billingId], references: [id])\n  SurveyInterest            SurveyInterest[] @relation(\"UserInterests\")\n}\n",
  "inlineSchemaHash": "49aac9691a05fda8421873636e8da227df2ef3299e21b4dc2f9d649370dacd44",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Billing\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"planName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BillingToUser\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reference\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paidAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PaymentToUser\"}],\"dbName\":null},\"SurveyInterest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserInterests\"}],\"dbName\":null},\"Ticket\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"priority\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TicketToUser\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerifiedAt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"alternatePhoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"employmentStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mostPreferredCommsChannel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"howYouGotToKnowUs\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePhoto\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dob\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"occupation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"twoFactorAuth\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastLogin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"browserAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subscriptionPlan\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subscriptionPlanExpireAt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"billingId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"referralCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"softDelete\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"countryCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stateCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subDivisionCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subDivisionName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hasOnboarded\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToUser\"},{\"name\":\"Ticket\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"TicketToUser\"},{\"name\":\"Billing\",\"kind\":\"object\",\"type\":\"Billing\",\"relationName\":\"BillingToUser\"},{\"name\":\"SurveyInterest\",\"kind\":\"object\",\"type\":\"SurveyInterest\",\"relationName\":\"UserInterests\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

